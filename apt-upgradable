#!/bin/bash
#
# For more information either run `munindoc apt-upgradable` or read
# `apt-upgradable.pod`
#
#%# family=auto
#%# capabilities=autoconf

APTITUDE=${aptitude_path:-/usr/bin/aptitude}
UPG_COLOR=${upgrades_color:-00ff00}
ESS_COLOR=${essential_color:-ff0000}
IMP_COLOR=${important_color:-000000}
IMPORTANT_PKGS=${important:-""}
ARR_IMPORTANT=($IMPORTANT_PKGS)

function in_array() {
   local x
   ENTRY=$1
   shift 1
   ARRAY=( "$@" )
   [ -z "${ARRAY}" ] && return 1
   [ -z "${ENTRY}" ] && return 1
   for x in ${ARRAY[@]}; do
      [ "${x}" == "${ENTRY}" ] && return 0
   done
   return 1
}

case $1 in
    autoconf)
        if [ -x ${APTITUDE} ] ; then
            echo "yes"
        else
            echo "no ('${APTITUDE}' is not executable. You can override the path using the 'aptitude_path' environment variable)!"
        fi
        exit 0;;
    config)
        echo "graph_title Available APT upgrades"
        echo "graph_vlabel packages"
        echo "graph_category system"
        echo "graph_printf %3.0lf"
        echo "graph_args --base 1000 --lower-limit 0"
        echo "upgrades.label Upgradable packages"
        echo "upgrades.draw AREA"
        echo "upgrades.colour ${UPG_COLOR}"
        echo "essential.label Essential upgrades"
        echo "essential.draw STACK"
        echo "essential.colour ${ESS_COLOR}"
        if [ "${#ARR_IMPORTANT[@]}" -ne 0 ]; then
            echo "important.label Important upgrades"
            echo "important.draw LINE"
            echo "important.warning 0:0"
            echo "important.colour ${IMP_COLOR}"
        fi
    exit 0;;
esac

ESSENTIAL=$(${APTITUDE} search "?and(?and(?not(?automatic), ?upgradable), ?essential)" | wc -l)
UPGRADES=$(${APTITUDE} search "?and(?and(?not(?automatic), ?upgradable), ?not(?essential))" | wc -l)

echo "essential.value $ESSENTIAL"
echo "upgrades.value $UPGRADES"

if [ "${#ARR_IMPORTANT[@]}" -ne 0 ]; then
    NUM_IMPORTANT=0
    for pkg in $($APTITUDE -F "%p" search ~U); do
        in_array ${pkg} "${ARR_IMPORTANT[@]}"
        RET=$?
        if [ "${RET}" -eq 0 ]; then
            NUM_IMPORTANT=$(($NUM_IMPORTANT+1))
        fi
    done
    echo "important.value $NUM_IMPORTANT"
fi
