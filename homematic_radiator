#!/usr/bin/env python
#%# family=auto
#%# capabilities=autoconf

from __future__ import print_function
from os import getenv
from os.path import basename
from xml.dom.minidom import parseString
import argparse
import httplib
import logging
import sys

LOG = logging.getLogger(__name__)


class RemoteDocument(object):

    def __init__(self, hostname, device_id, channel_name):
        self.hostname = hostname
        self.device_id = int(device_id)
        self.channel_name = channel_name
        self._data = None
        self.basename =basename(sys.argv[0])

    def parse_document(self):
        path = '/addons/xmlapi/state.cgi?device_id=%d' % self.device_id
        conn = httplib.HTTPConnection(self.hostname)
        conn.request('GET', path)
        response = conn.getresponse()
        if response.status != 200:
            raise Exception('Error %s: %s' % (response.status,
                                              response.reason))
        dom = parseString(response.read())
        state = dom.firstChild
        device = state.firstChild

        for channel in device.childNodes:
            if channel.getAttribute('name') == self.channel_name:
                break
        data_points = {
            dp.getAttribute('type'): dp.getAttribute('value')
            for dp in channel.childNodes
        }
        return {
            'global': {'device_name': device.getAttribute('name')},
            'channel': data_points
        }

    @property
    def device_name(self):
        if not self._data:
            self._data = self.parse_document()
        return self._data['global']['device_name']

    def __getitem__(self, key):
        if not self._data:
            self._data = self.parse_document()
        return self._data['channel'][key]


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', nargs='?',
                        help='The munin action to perform',
                        default='fetch')
    return parser.parse_args()


def config(document):

    print("multigraph %s_temperature" % document.basename)
    print("graph_category homematic")
    print("graph_title %s temp" % document.device_name)
    print("graph_vlabel temp")
    print("graph_printf %3.0lf")
    print("graph_args --base 1000 --lower-limit -10 --upper-limit 45")
    print("actual.label Actual Temp.")
    print("actual.draw AREA")
    print("set.label Target Temp.")
    print("set.draw LINE")

    print("multigraph %s_valve" % document.basename)
    print("graph_category homematic")
    print("graph_title %s valve" % document.device_name)
    print("graph_vlabel opening")
    print("graph_printf %3.0lf")
    print("graph_args --base 1000 --lower-limit 0 --upper-limit 100")
    print("position.label Position")
    print("position.draw LINE")


def fetch(document):
    print("multigraph %s_temperature" % document.basename)
    print("actual.value %2.2f" % float(document['ACTUAL_TEMPERATURE']))
    print("set.value %2.2f" % float(document['SET_TEMPERATURE']))

    print("multigraph %s_valve" % document.basename)
    print("position.value %2.2f" % float(document['VALVE_STATE']))


def main(action):

    if action == 'autoconf':
        LOG.error('autoconf is not yet implemented')
        print('no (autoconf not yet implemented)')
        return 0

    channel_name = getenv('HM_DATA_CHANNEL', 'HM-CC-RT-DN MEQ0250064:4')
    device_id = getenv('HM_DEVICE_ID', '1424')
    hostname = getenv('HM_HOSTNAME', '192.168.1.66')

    document = RemoteDocument(hostname, device_id, channel_name)

    if action == 'config':
        config(document)
    else:
        fetch(document)

    return 0


if __name__ == '__main__':
    logging.basicConfig()
    args = parse_args()
    sys.exit(main(args.action))
