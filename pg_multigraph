#!/usr/bin/env python

from __future__ import print_function
from os import getenv
from psycopg2 import connect  # TODO <- munin autoconfig
from psycopg2.extras import DictCursor
from textwrap import dedent
import argparse
import sys


GRAPHS = getenv('PG_GRAPHS', '')
GRAPHS = GRAPHS.split()
DSN = getenv('PG_DSN', 'user=postgres dbname=template1')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', nargs='?',
                        help='The munin action to perform',
                        default='fetch')
    return parser.parse_args()


class SimpleGraph(object):

    def do_fetch(self):
        connection = connect(DSN)
        cursor = connection.cursor(cursor_factory=DictCursor)
        cursor.execute(self.QUERY)
        for row in cursor:
            for field in self.HELP:
                print('%s.value %s' % (field, row[field]))
        cursor.close()

    def do_config(self):
        doc = ('graph_title {title}\n'
               'graph_category PostgreSQL\n'
               '{graph_options}\n')
        print(doc.format(
            title=self.TITLE,
            graph_options=self.GRAPH_OPTIONS))

    def __call__(self, action):
        fun = getattr(self, 'do_%s' % action, None)
        if fun:
            fun()
        else:
            sys.stderr.write("Can't run %s. Unknown action %r\n" % (
                self.__class__.__name__, action))


class BGWriterGraph(SimpleGraph):

    TITLE = 'Background Writer'
    GRAPH_OPTIONS = dedent(
        '''\
        graph_args --base 1024
        graph_vlabel Size in Bytes

        buffers_checkpoint.label Buffers Checkpoint
        buffers_clean.label Cleaned buffers
        buffers_backend.label Backend buffers
        buffers_alloc.label Allocated buffers
        ''')

    QUERY = ('SELECT '
             'buffers_checkpoint, '
             'buffers_clean, '
             'buffers_backend, '
             'buffers_alloc '
             'FROM pg_stat_bgwriter')


if __name__ == '__main__':
    args = parse_args()
    for cls in SimpleGraph.__subclasses__():
        obj = cls()
        obj(args.action)
